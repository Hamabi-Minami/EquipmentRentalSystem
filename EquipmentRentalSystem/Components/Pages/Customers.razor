@page "/customer"
@using Services;
@using Models;
@using ViewModels;
@using Utils;
@inject GenericityService genericityService;
@inject CustomerViewModel CustomerVM;
@inject MessageHelper msgHelper;


<h1>Customers</h1>

<div class="row align-items-end mb-3">
    <div class="col-md-1">
        <div class="form-group">
            <label for="inputID">Customer ID</label>
            <input class="form-control" placeholder="Customer ID" @bind-value="inputID" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label for="inputFirstName">First Name</label>
            <input class="form-control" placeholder="first name" @bind-value="inputFirstName" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label for="inputLastName">Last Name</label>
            <input class="form-control" placeholder="last name" @bind-value="inputLastName" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label for="inputPhone">Phone</label>
            <input class="form-control" placeholder="phone number" @bind-value="inputPhone" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label for="inputEmail">Email</label>
            <input class="form-control" placeholder="email" @bind-value="inputEmail" />
        </div>
    </div>
    <div class="col-md-3 d-flex justify-content-end align-items-end">
        <button type="submit" class="btn btn-primary me-2" @onclick="Search">Search</button>
        <button type="submit" class="btn btn-primary me-2" @onclick="Add">Add</button>
        <button type="submit" class="btn btn-secondary me-2" @onclick="Update">Update</button>
        <button type="submit" class="btn btn-danger" @onclick="Remove">Remove</button>
    </div>
</div>

<div class="row">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Client ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @if (CustomerVM.pagedCustomers == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var customer in CustomerVM.pagedCustomers)
                {
                    <tr class="@(selectedCustomer == customer ? "table-primary" : "")" @onclick="() => Select(customer)">
                        <td>@customer.ID</td>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.Phone</td>
                        <td>@customer.Email</td>
                    </tr>
                }
            }
        </tbody>

    </table>
</div>

<div class="pagination d-flex align-items-center justify-content-end" style="align-content: center">
    <button class="btn btn-primary me-2" @onclick="CustomerVM.PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
    <span class="me-2">Page @CustomerVM.CurrentPage of @CustomerVM.TotalPages</span>
    <button class="btn btn-primary me-2" @onclick="CustomerVM.NextPage" disabled="@(!HasNextPage)">Next</button>
    <button class="btn btn-primary me-2" @onclick="()=>JumpPage(pageNumber)">Jump To</button>
    <input class="form-control me-2" style="width: 50px; height: 30px; padding: 2px;" placeholder="@CustomerVM.CurrentPage" @bind-value="@pageNumber" />
</div>


@code {

    private bool HasPreviousPage => CustomerVM.CurrentPage > 1;
    private bool HasNextPage => CustomerVM.CurrentPage < CustomerVM.TotalPages;
    private static int pageNumber = 0;

    private int inputID = 0;
    private string inputFirstName = "";
    private string inputLastName = "";
    private string inputPhone = "";
    private string inputEmail = "";

    private Models.Customer selectedCustomer;

    private List<Models.Customer> customers;

    protected override async Task OnInitializedAsync()
    {
        await CustomerVM.LoadCustomersAsync();
        customers = await genericityService.GetObjects<Models.Customer>();
    }

    private void Select(Models.Customer customer)
    {
        selectedCustomer = customer;
        inputID = selectedCustomer.ID;
        inputFirstName = selectedCustomer.FirstName;
        inputLastName = selectedCustomer.LastName;
        inputPhone = selectedCustomer.Phone;
        inputEmail = selectedCustomer.Email;
    }

    private async Task Add()
    {
        if (string.IsNullOrEmpty(inputFirstName) || string.IsNullOrEmpty(inputLastName) || string.IsNullOrEmpty(inputPhone) || string.IsNullOrEmpty(inputEmail))
        {
            await msgHelper.ShowMessage("CategoryId or Description is null!");
            return;
        }

        var isExist = await CustomerVM.CheckExist(inputID, inputPhone, inputEmail);
        if (isExist)
        {
            await msgHelper.ShowMessage("A customer with the same ID or phone or email already exists!");
            return;
        }

        Models.Customer newCustomer = new Models.Customer
            {
                ID = inputID,
                FirstName = inputFirstName,
                LastName = inputLastName,
                Phone = inputPhone,
                Email = inputEmail
            };

        await CustomerVM.AddCustomerAsync(newCustomer);
    }

    private async Task Search()
    {
        Dictionary<string, string> dict = new Dictionary<string, string>();

        if (inputID != 0)
        {
            dict.Add("ID", inputID.ToString());
        }

        if (!string.IsNullOrEmpty(inputFirstName))
        {
            dict.Add("FirstName", inputFirstName);
        }

        if (!string.IsNullOrEmpty(inputLastName))
        {
            dict.Add("LastName", inputLastName);
        }

        if (!string.IsNullOrEmpty(inputPhone))
        {
            dict.Add("Phone", inputPhone);
        }

        if (!string.IsNullOrEmpty(inputEmail))
        {
            dict.Add("Email", inputEmail);
        }

        Console.WriteLine(dict);
        await CustomerVM.Search(dict);
    }

    private async Task Update()
    {
        if (string.IsNullOrEmpty(inputFirstName) || string.IsNullOrEmpty(inputLastName) || string.IsNullOrEmpty(inputPhone) || string.IsNullOrEmpty(inputEmail))
        {
            await msgHelper.ShowMessage("CategoryId or Description is null!");
            return;
        }
        if (selectedCustomer == null)
        {
            await msgHelper.ShowMessage("No category is selected!");
            return;
        }

        selectedCustomer.FirstName = inputFirstName;
        selectedCustomer.LastName = inputLastName;
        selectedCustomer.Phone = inputPhone;
        selectedCustomer.Email = inputEmail;

        await CustomerVM.UpdateCustomerAsync(selectedCustomer);
    }

    private async Task Remove()
    {
        if (selectedCustomer == null)
        {
            await msgHelper.ShowMessage("No category is selected");
            return;
        }
        await CustomerVM.DeleteCustomerAsync(selectedCustomer);
    }

    private void JumpPage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= CustomerVM.TotalPages)
        {
            CustomerVM.CurrentPage = pageNumber;
        }
    }
}